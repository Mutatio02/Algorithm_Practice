#include <bits/stdc++.h>
using namespace std;
// 25.01.21~22 시뮬레이션 {테트로미노} -- brute or bfs/dfs
int N,M;
int board[505][505];
pair<int,int> tetro[19][4] = {
    // 민트{2}
    {{0,0},{0,1},{0,2},{0,3}}, 
    {{0,0},{1,0},{2,0},{3,0}},
    // 노랑{1}
    {{0,0},{0,1},{1,0},{1,1}},
    // 주황{8}
    {{0,0},{1,0},{2,0},{2,1}},
    {{0,2},{1,0},{1,1},{1,2}},
    {{0,0},{0,1},{1,1},{2,1}},
    {{0,0},{0,1},{0,2},{1,0}},
    // 주황 뒤집기
    {{2,0},{0,1},{1,1},{2,1}},
    {{0,0},{0,1},{0,2},{1,2}},
    {{0,0},{1,0},{1,1},{1,2}},
    {{0,0},{1,0},{2,0},{0,1}},
    // 연두{4}
    {{0,0},{1,0},{1,1},{2,1}},
    {{1,0},{1,1},{0,1},{0,2}},
    // 연두 뒤집기
    {{2,0},{1,0},{1,1},{0,1}},
    {{0,0},{0,1},{1,1},{1,2}},
    // 핑크{4}
    {{0,0},{0,1},{0,2},{1,1}},
    {{0,0},{1,0},{2,0},{1,1}},
    {{0,1},{1,0},{1,1},{1,2}},
    {{1,0},{0,1},{1,1},{2,1}}
};
int solve(int x,int y) {
    int sum = 0;
    for(int i=0; i<19; i++) {
        int tmp = 0;
        for(int j=0; j<4; j++) {
            tmp += board[x+tetro[i][j].first][y+tetro[i][j].second];
        }
        sum = max(sum,tmp);
    }
    return sum;
}
int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    
    cin >> N >> M;
    for(int i=0; i<N; i++) {
        for(int j=0; j<M; j++) {
            cin >> board[i][j];
        }
    }

    int result = 0;
    for(int i=0; i<N; i++) {
        for(int j=0; j<M; j++) {
            result = max(result,solve(i,j));
        }
    }
    
    cout << result;

    return 0;
}
